plugins {
    id 'java'
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
    }
    mavenCentral()
}

def runeLiteVersion = 'latest.release'

dependencies {
    compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'junit:junit:4.12'
    testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion
}

group = 'com.adamk33n3r.runelite.recommendedequipment'


def versionProps = new Properties()
def versionPropsFile = file("src/main/resources/${group.replace('.', '/')}/version.properties")
if (versionPropsFile.exists())
    versionProps.load(versionPropsFile.newReader())

def major = (versionProps['VERSION_MAJOR'] as String ?: '0').toInteger()
def minor = (versionProps['VERSION_MINOR'] as String ?: '0').toInteger()
def patch = (versionProps['VERSION_PATCH'] as String ?: '0').toInteger()
def build = (versionProps['VERSION_BUILD'] as String ?: '0').toInteger()
def phase = (versionProps['VERSION_PHASE'] as String ?: '')

version = major+'.'+minor+'.'+patch
if (!phase.empty)
    version = version+'-'+phase
version = version+'+'+build

compileJava.doFirst {
    def runTasks = gradle.startParameter.taskNames
    if ("build" !in runTasks || "runelitePluginHubPackage" in runTasks) return
    build += 1
    versionProps['VERSION_BUILD'] = build.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
    version = major+'.'+minor+'.'+patch
    if (!phase.empty)
        version = version+'-'+phase
    version = version+'+'+build
}

sourceCompatibility = 11
targetCompatibility = 11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release.set(11)
}

tasks.register("shadowJar", Jar) {
    dependsOn configurations.testRuntimeClasspath
    manifest {
        attributes 'Main-Class': 'com.adamk33n3r.runelite.recommendedequipment.RecommendedEquipmentPluginLauncher'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
    from sourceSets.test.output
    from({
        configurations.testRuntimeClasspath.collect {
            // Ignore test framework stuff, especially bytebuddy because it's like 4MB
            if (it.path.contains("mockito") ||
                it.path.contains("guice-testlib") ||
                it.path.contains("junit") ||
                it.path.contains("bytebuddy")) {
                return null
            }
            it.isDirectory() ? it : zipTree(it)
        }
    })
    exclude("META-INF/INDEX.LIST")
    exclude("META-INF/*.SF")
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude "**/module-info.class"

    group = BasePlugin.BUILD_GROUP
    archiveClassifier = "shadow"
    archiveFileName = rootProject.name + "-" + project.version + "-all.jar"
    destinationDirectory = file('jars')
}
